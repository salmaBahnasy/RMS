import PushNotification from 'react-native-push-notification';
import { Platform } from 'react-native';
import { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';

let connection;

// ุชููุฆุฉ ุงูุฅุดุนุงุฑุงุช
export const configurePushNotifications = async () => {
  PushNotification.configure({
    requestPermissions: Platform.OS === 'ios',
    onNotification: function (notification) {
      console.log('๐ฌ Notification received:', notification);
    },
    popInitialNotification: true,
  });
};

// ุฅูุดุงุก ุงุชุตุงู ุฌุฏูุฏ
const createSignalRConnection = () => {
  return new HubConnectionBuilder()
    .withUrl('https://your-server-url/hub') // ๐ ุบููุฑู ุงูุฑุงุจุท ุฅูู ุฑุงุจุท ุงูุณูุฑูุฑ ุงูุฎุงุต ุจู
    .configureLogging(LogLevel.Information)
    .withAutomaticReconnect([0, 2000, 10000, 30000]) // ๐ ูุญุงููุงุช ุงูุฅุนุงุฏุฉ: ููุฑุงูุ ุจุนุฏ 2 ุซุงููุฉุ 10 ุซูุงููุ 30 ุซุงููุฉ
    .build();
};

// ุจุฏุก ุงูุงุชุตุงู
export const startSignalRConnection = async () => {
  connection = createSignalRConnection();

  connection.onreconnecting((error) => {
    console.log('๐ SignalR reconnecting...', error);
  });

  connection.onreconnected((connectionId) => {
    console.log('โ SignalR reconnected. Connection ID:', connectionId);
  });

  connection.onclose((error) => {
    console.log('โ SignalR disconnected.', error);
    reconnectSignalR();
  });

  try {
    await connection.start();
    console.log('โ SignalR Connected');
  } catch (err) {
    console.error('โ SignalR Connection failed:', err);
    reconnectSignalR();
  }

  // ุงุณุชูุจุงู ุงูุฑุณุงุฆู ูู ุงูุณูุฑูุฑ
  connection.on('ReceiveMessage', (title, message) => {
    console.log('๐ฉ New message from server:', { title, message });
    showLocalNotification(title, message);
  });
};

// ูุธููุฉ ูุฅุนุงุฏุฉ ุงูุงุชุตุงู ุฅุฐุง ูุดู
const reconnectSignalR = async () => {
  console.log('โณ Trying to reconnect to SignalR...');
  setTimeout(async () => {
    try {
      connection = createSignalRConnection();
      await connection.start();
      console.log('โ Reconnected to SignalR after disconnection.');
    } catch (error) {
      console.error('โ Reconnection attempt failed:', error);
      reconnectSignalR(); // ูุนูุฏ ุงููุญุงููุฉ ูู ุฌุฏูุฏ ูู ูุดู
    }
  }, 5000); // ููุชุธุฑ 5 ุซูุงูู ูุจู ุงููุญุงููุฉ
};

// ุฅุฑุณุงู ุฅุดุนุงุฑ ูุญูู ุงุญุชุฑุงูู
const showLocalNotification = (title, message) => {
  PushNotification.localNotification({
    /* ุฎูุงุฑุงุช ุงูุฅุดุนุงุฑ */
    channelId: "default-channel-id", // ุชุฃูุฏู ุฃู ุนูุฏู ููุงุฉ ูุนุฑูุฉ ุจูุฐุง ุงูุงุณู (ูุฌูุฒูุง ูู ุญุจูุชู)
    title: title || '๐ข ุฅุดุนุงุฑ ุฌุฏูุฏ', 
    message: message || 'ูุฏูู ุฑุณุงูุฉ ุฌุฏูุฏุฉ.',
    playSound: true,
    soundName: 'default', // ุฃู ุถุนู ุงุณู ููู ุงูุตูุช ุฅู ุฃุฑุฏุชู ุชุฎุตูุตู
    // smallIcon: 'ic_notification', // ุชุฃูุฏู ุฃู ุงูุฃููููุฉ ูุถุงูุฉ ูู Android
    // largeIcon: 'ic_launcher', // ุงูุฃููููุฉ ุงููุจูุฑุฉ
    importance: "high",
    priority: "high",
    vibrate: true,
  });
};
